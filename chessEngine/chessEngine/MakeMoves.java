package chessEngine;


// TODO needs integration with GenerateMoves class for file and rank masks
// TODO required to check if king is in check??


/*
 * Make moves class makes the moves which were generated by GenerateMoves class
 * makeMove function looks at characters in move list and determines if it is a
 * regular move, castle, or en passant.
 */

public class MakeMoves {
	
	public long makeMove(long board, String move, char type) {
		if (Character.isDigit(move.charAt(3))) { // just a move
			int start = (Character.getNumericValue(move.charAt(0)) * 8) // multiply by to get proper bit index
					+ (Character.getNumericValue(move.charAt(1)));
			int end = (Character.getNumericValue(move.charAt(2)) * 8) // multiply by to get proper bit index
					+ (Character.getNumericValue(move.charAt(3)));
			if (((board >>> start) & 1) == 1) { // check that starting location exists on board
				board &= ~(1L << start); // remove piece from starting location
				board |= (1L << end); // add piece to destination
			} else {
				board &= ~(1L << end); // removes piece at destination if capture occurs
			}
		} else if (move.charAt(3) == 'P') { // pawn promotion
			int start, end;
			if (Character.isUpperCase(move.charAt(2))) { // if white move
				start = Long.numberOfTrailingZeros(fileMasks[move.charAt(0)-'0'] & rankMasks[1]);
				end = Long.numberOfTrailingZeros(fileMasks[move.charAt(1)-'0'] & rankMasks[0]);
			} else { // black move
				start = Long.numberOfTrailingZeros(fileMasks[move.charAt(0)-'0'] & rankMasks[6]);
				end = Long.numberOfTrailingZeros(fileMasks[move.charAt(1)-'0'] & rankMasks[7]);
			}
			if (type == move.charAt(2)) { // check that piece promotion matches board type
				board |= (1L << end); // add promoted piece to destination
			} else {
				board &= ~(1L << start); // remove pawn from starting location
				board &= ~(1L << end); // remove pawn from destination
			}
		} else if (move.charAt(3)=='E') {//en passant
			int start, end;
			if (move.charAt(2)=='W') { // white move
				start = Long.numberOfTrailingZeros(fileMasks[move.charAt(0)-'0'] & rankMasks[3]);
				end  = Long.numberOfTrailingZeros(fileMasks[move.charAt(1)-'0'] & rankMasks[2]);
				board &= ~(fileMasks[move.charAt(1)-'0'] & rankMasks[3]);
			} else { // black move
				start = Long.numberOfTrailingZeros(fileMasks[move.charAt(0)-'0'] & rankMasks[4]);
				end = Long.numberOfTrailingZeros(fileMasks[move.charAt(1)-'0'] & rankMasks[5]);
				board &= ~(fileMasks[move.charAt(1)-'0'] & rankMasks[4]);
			}
			if (((board >>> start) & 1) == 1) { // check that starting location exists on board
				board &= ~(1L << start); // remove piece from starting location
				board |= (1L << end); // add piece to destination
			}
		} else { // catch errors in move list
			System.out.print("ERROR: Invalid move type");
		}
		return board;
	}
	
	public static long makeMoveEP(long board, String move) {
		if (Character.isDigit(move.charAt(3))) { // check move type
			int start = (Character.getNumericValue(move.charAt(0)) * 8) // multiply by to get proper bit index
					+ (Character.getNumericValue(move.charAt(1)));
			if ((Math.abs(move.charAt(0) - move.charAt(2)) == 2)
					&& (((board >>> start) & 1) == 1)) { // move is a pawn double push
				return fileMasks[move.charAt(1)-'0']; // return mask for file where en passant is possible
			}
		}
		return 0;
	}
	
	public static long makeMoveCastle(long rBoard, long kBoard, String move, char type) {
		int start = (Character.getNumericValue(move.charAt(0)) * 8) // multiply by to get proper bit index
				+ (Character.getNumericValue(move.charAt(1)));
		if ((((kBoard >>> start) & 1) == 1) // ensure king is still in starting position
				&& (("0402".equals(move))  // black, queen side castle
				|| ("0406".equals(move)) // black, king side castle
				|| ("7472".equals(move)) // white, queen side
				|| ("7476".equals(move)))) { // white, king side
			if (type == 'R') { // white move
				switch (move) {
				case "7472": // queen side
					rBoard &= ~(1L << 56); // remove rook from starting location
					rBoard |= (1L << (56 + 3)); // add rook to destination
					break;
				
				case "7476": // king side
					rBoard &= ~(1L << 63); // remove rook from starting location
					rBoard |= (1L << (63 - 2)); // add rook to destination
					break;
				}
			} else { // black move
				switch (move) {
				case "0402": // queen side
					rBoard &= ~(1L << 0); // remove rook from starting location
					rBoard |= (1L << (0 + 3)); // add rook to destination
					break;
				case "0406": // king side
					rBoard &= ~(1L << 7); // remove rook from starting location
					rBoard |= (1L << (7 - 2)); // add rook to destination
				break;
				}
			}
		}
		return rBoard;
	}


}
