3P71 PROJECT MASTER

TODO
	
	email for what goes in root node
		create root node
			init bitboards
			set castling rights
			set enpassant mask
			set move counters
			generate nextmoveslist?
	
	find perft

	Thread
		understand threading , interrupt 
		thinker.alert(go | stop) - handles the thread, when done returns to player
		hard alerts
			go - take command params, start new search-thread
			stop output best move, go to wait, notify then wait on thing
		update alerts game, update internal root nodeXX, once update wait for go, then new thread
			newgame
			position


		
	class Thinker
		TIMER - wiki
		engine time & inc depends which side engine is playing

	engine
		unsafe method
		evaluate root node
			are you in check
			eval may decide on likely checking move, so score can't be too low
			eval: # of pieces your attacking is added to eval score
			total sum : # pieces + # moves possible/piece (moveability) + positional score (where on board) + # pieces attacking - opponents score (equivelant sum) 

		rehash: has generate & makemoves classes right now. might unite
		finish tree
		code eval


	DEBUG
		threading: uci isReady, etc
		perft
		games
		elo estimate http://chess.stackexchange.com/questions/12790/how-to-measure-strength-of-my-own-chess-engine


	HOLD
		update engine
			debug
			setoptions
		go searchmoves ok? skip till later
	 
		setOptions?
			parse rest of line


DONE
	UCI commands
		go
			parse rest of line 
			infinite - no limit, must go till gets stop command
			depth n - go till certain plyCount
			movetime - search exactly x milliseconds
			subs
				searchmoves <move1> .... <movei>
				ponder 
				wtime <x> btime <x> winc <x> binc <x> 
				movestogo <x> depth <x> nodes <x> mate <x> movetime <x>  infinite
		position	
			parse startpos
			fenparse - fenparts 4 enpassant

		stop
		uci
		isReady
			check searcher thread if idle
			only checks once right away. may need wait
			thinker needs to go to wait state when ready
		ucinewgame
		quit

		both safely done in search thread:
		output info command?
		
		uci bestmove
			position
			[parse fen]
			[makeMove()]
		newgame
			[reset all]

	player	add pieces to piece list @parseFEN
	
	gamestate
		parse move 
		NO, trusting gui. done when searching only. check can actually castle 

	Thinker
		terminate should be ok
		system.out - does it already

	breakdown prob,
		names, interface
		breakdown jobs
			setup deadlines

DESIGN

	ACTIONS
		Game Events
			move, capture - removed piece, other adjustments?, piece count, 

	class game
			General
				current board
				make moves, reset 
				timers, 
				move history
				turn, mate, checkmate, draw
				removed pieces, moving rights/allowed
			from go
				winc, binc, movestogo, 
			from position
				startpos -> reset board @ currentGame state, maybe reset game
				fen does board and currentGame state
				moves -> currentGame state
			from newgame - reset whole thing


	class command
			from go
				searchmoves, ponder, movestogo
				depth, nodes, mate (search for), movetime, infinite
			from position, newgame 
				change game state -- thinker needs to know
			from debug, setoption 
				change thinker, needs to know too
			ponderhit
			stop


NOTES
	Rank = row, File = column
	UCI
		use java scanner for input 
		[see http://stackoverflow.com/questions/17637032/bufferedreader-vs-console-vs-scanner ; and further links]

	Thread
		threading best way to handle accepting UCI input while engine is working
		join only for terminating thread
		wait vs sleep vs 


	Launch4j - wraps .jar file into .exe to use with any app

	INSTALLS
		Scid vs Mac
		ICC for Mac
		Xboard & engines
		Arena
		Stockfish engine & repos
		AC2 example from logicCrazy

-------
logic crazy adv
	bitboard
	iterative deepening
	alpha-beta
	transposition tables
	(aspiration windows)
	NO
		(threads)
		(principal variation search)
		(advanced theoretical evaluation)



----------
Required

system requirements are as follows:
	The program should respect the rules of chess, for example,
		the movement of pieces (including castling and en passant), § piece promotion, check
		checkmate
		stalemate
		Please obtain a book on chess to verify your understanding of the game!

	The program must use a game tree search scheme with alpha-beta pruning. Furthermore, the program should permit user-supplied control parameters, for example, the depth of search.

	Put effort towards designing an effective board evaluation function. You should research the literature on computer chess to find strategies used by other systems. You can borrow ideas from the literature (properly acknowledged in your report). I also encourage you to try your own ideas!

	The program should interact with a human player. Moves should be given via board coordinates. At the minimum, the program should dump out the current board as an ASCII table (e.g., upper case = black, lower case = white, space = “- “,). Although a graphical user interface is not required, an effective GUI will be positively considered during evaluation.

	Your program should permit any board setup to be used initially. (This is good for testing purposes)

	dump out the game in terms of a standard chess output text file.

	------

TUT Nov20
	CHESS PROJECT

	include experiment protocols (same what I did in asgn2 parameter section)
	Notification/warning if you are in check
	4-ply minimum - MAJOR MARKS DO NOT SKIMP - turns should be around 15sec
	have GUI
	indicate whose turn it is
	ability to restart game after losing
	report which details your creative heuristic - GO IN DEPTH, MORE THE BETTER

	ME
		conditionals
			what moves can be made testing
			condition if in check
			condition if can do special moves

LEC Oct26,28

----------
REPORT
	BODY
		Computer Opponent
			heuristics used
			algorithm discussion

		Implementation
			platform
			program design (how decomposed, think OO)
			coding particulars
			credit code reused, ideas and tutorials used




	REFERENCES
		Laws of Chess starting after July 1, 2014 https://www.fide.com/component/handbook/?id=171&view=article

ARCHIVE
	TODO
		build engine
		bitboards
			generation 
		move generation
			eval legal rules of chess
		node
		tree - search & eval
			score board state
